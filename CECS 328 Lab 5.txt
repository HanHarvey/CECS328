package heapsort;

/**
 * CECS Lab 5
 * @author Harvey Han
 */
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;
import java.util.Random;
public class Heapsort {
	
	public static void main(String []args) {
                
                Scanner in = new Scanner(System.in);
                Random ran = new Random();
                System.out.println("Enter a positive integer :");
                int n = in.nextInt();
                int []a;
                a = new int[n];
                for(int i = 0; i < n; i++)
                {
                    a[i] = (ran.nextInt(10000+1+10000) - 10000);
                }
		for(int i =0; i < a.length; i++) {
			System.out.print(a[i]+" ");
		}
		System.out.println();
		heapsort(a);
		for(int i =0; i < a.length; i++) {
			System.out.print(a[i] + " ");
		}
                System.out.println();
		averageHeapsort(10);
		averageSelectionSort(100);
		averageQuicksort(100);
		
	}
	
	//Heapsort
	public static void heapsort(int []a) {
		buildMaxHeap(a);
		int lastIndex = a.length-1;
		int size = a.length;
		int [] newArray = new int[a.length];
		while(lastIndex !=0) {
			int auxiliary = a[0];
			a[0] = a[lastIndex];
			a[lastIndex] = auxiliary;
			newArray[lastIndex] = a[lastIndex];
			lastIndex--;
			size--;
			maxHeapify(a,0, size);
		}
		
	}
	public static void buildMaxHeap(int []a) {
		for(int i = (a.length)/2;i>-1;i--) {
			maxHeapify(a,i, a.length);
		}
	}
	public static void maxHeapify(int []a, int index, int sizeOfArray) {
		int leftIndex = (index*2)+1;
		int rightIndex = (index*2)+2;
		int maxIndex = index;
		if(sizeOfArray-1>= leftIndex ) {
			if(a[leftIndex]> a[maxIndex]) {
				maxIndex=leftIndex;
			}
		}
		if(sizeOfArray-1>= rightIndex) {
			if(a[rightIndex]>a[maxIndex]) {
				maxIndex=rightIndex;
			}
		}
		if(maxIndex!=index) {
			int temp = a[maxIndex];
			a[maxIndex] = a[index];
			a[index] = temp;
			maxHeapify(a,maxIndex,sizeOfArray);
		}
	}
	public static void averageHeapsort(int maxRep) {
		int n = 10000;
                Random ran = new Random();
		long startTime = System.nanoTime();
		while(n < maxRep) {
                    int []a;
                    a = new int[n];
                    for(int i = 0; i < n; i++)
                    {
                        a[i] = (ran.nextInt(10000+1+10000) - 10000);
                    }
                    heapsort(a);
                    n++;
                }
		long endTime = System.nanoTime();
		long heapsortAverage = endTime-startTime;
		System.out.println("Average running time: heapsort for " + maxRep + " repetitions is " + heapsortAverage);
        }
	//Selection sort
	public static void selectionSort(int []array) {
		for(int i=0;i<array.length;i++) {
			int minimum = i;
			for(int j=i+1;j<array.length;j++) {
				if(array[minimum]>array[j]) {
					minimum = j;
				}
			}
			int temp = array[minimum];
			array[minimum] = array[i];
			array[i] = temp;
		}
	}
	public static void averageSelectionSort(int maxRep) {
		int n = 10000;
                Random ran = new Random();
		long startTime = System.nanoTime();
		while(n<maxRep) {
                    int []a;
                    a = new int[n];
                    for(int i = 0; i < n; i++)
                    {
                        a[i] = (ran.nextInt(10000+1+10000) - 10000);
                    }
                    selectionSort(a);
                    n++;
		}
		long endTime = System.nanoTime();
		long selectionSortAverage = endTime-startTime;
		System.out.println("Average running time of selection sort for " + maxRep + " repetitions is " + selectionSortAverage);
	}
	//Quicksort
	public static void quicksort(int []array,int start, int end) {
		if(Math.max(start,end) == end) {
			int	pace = partition(array, start, end);
			quicksort(array,start, pace-1);
			quicksort(array,pace+1, end);
		}
	}
	public static void averageQuicksort(int maxRep) {
		int n = 10000;
                Random ran = new Random();
		long startTime = System.nanoTime();
		while(n<maxRep) {
                    int []a;
                    a = new int[n];
                    for(int i = 0; i < n; i++)
                    {
                        a[i] = (ran.nextInt(10000+1+10000) - 10000);
                    }
			quicksort(a,0, a.length-1);
			n++;
		}
		long endTime = System.nanoTime();
		long quickSortAverage = endTime-startTime;
		System.out.println("Average running time of quick sort for " + maxRep + " repetitions is " + quickSortAverage);
	}
	public static int partition(int []array, int startingPoint, int endingPoint) {
		int i=startingPoint-1;
		int pivot = array[endingPoint];
		for (int j = startingPoint; j<endingPoint;j++) {
			if(pivot > array[j]) {
				i++;
				int auxiliary = array[j];
				array[j] = array[i];
				array[i] = auxiliary;
			}
		}
		int temp = array[i+1];
		array[i + 1] = array[endingPoint];
		array[endingPoint] = temp;
		return i+1;
	}
	
	
}